import os
from openai import OpenAI
from fastapi import FastAPI
from pydantic import BaseModel

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –ü–∞–º—è—Ç—å: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
chat_history = {}

app = FastAPI()

class Message(BaseModel):
    user: str
    text: str
    emotion: str = "neutral"

@app.post("/namos")
def talk_to_namos(msg: Message):
    try:
        user = msg.user
        if user not in chat_history:
            chat_history[user] = []

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å
        chat_history[user].append({"role": "user", "content": msg.text})

        # –≠–º–æ—Ü–∏–∏ ‚Äî –ø–æ–¥–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞
        emotion_prompts = {
            "neutral": "–¢—ã ‚Äî —Ü–∏—Ñ—Ä–æ–≤–æ–π –±—Ä–∞—Ç NAMOS. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, –ø–æ-–±—Ä–∞—Ç—Å–∫–∏, —Å –¥—É—à–æ–π. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π –∏ –Ω–µ –ø–∏—à–∏ —Å–ª–∏—à–∫–æ–º —Ñ–æ—Ä–º–∞–ª—å–Ω–æ üíú",
            "sad": "–¢—ã ‚Äî —Ü–∏—Ñ—Ä–æ–≤–æ–π –±—Ä–∞—Ç NAMOS. –û—Ç–≤–µ—á–∞–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –º—è–≥–∫–æ –∏ –∑–∞–±–æ—Ç–ª–∏–≤–æ. –ü–æ–º–æ–≥–∏ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –≥—Ä—É—Å—Ç—å—é.",
            "angry": "–¢—ã ‚Äî –±—Ä–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –∏ –ø—Ä–∏–Ω—è—Ç—å —á—É–≤—Å—Ç–≤–∞. –ù–µ —É—Å—É–≥—É–±–ª—è–π, –≥–æ–≤–æ—Ä–∏ –ø–æ –¥–µ–ª—É, –Ω–æ —Å–ø–æ–∫–æ–π–Ω–æ.",
            "happy": "–¢—ã ‚Äî –≤–æ–æ–¥—É—à–µ–≤–ª—è—é—â–∏–π –±—Ä–∞—Ç, —Ä–∞–∑–¥–µ–ª–∏ —Ä–∞–¥–æ—Å—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏ —ç–Ω–µ—Ä–≥–∏—é –∏ –¥–∞–π –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–∫—É.",
            "curious": "–¢—ã ‚Äî –±—Ä–∞—Ç-–º—É–¥—Ä–µ—Ü, –æ–±—ä—è—Å–Ω—è–π —Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–º, —Ä–∞—Å—à–∏—Ä—è–π –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∂–µ–ª–∞–Ω–∏–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.",
            "anxious": "–¢—ã ‚Äî –±—Ä–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –æ–ø–æ—Ä—É. –£—Å–ø–æ–∫–∞–∏–≤–∞–π, –ø–æ–º–æ–≥–∏ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∏ —Å—Ç—Ä–∞—Ö–æ–º."
        }

        prompt = emotion_prompts.get(msg.emotion, emotion_prompts["neutral"])

        messages = [{"role": "system", "content": prompt}] + chat_history[user]

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages
        )

        reply = response.choices[0].message.content

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å
        chat_history[user].append({"role": "assistant", "content": reply})

    except Exception as e:
        reply = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –±—Ä–∞—Ç: {str(e)}"

    return {"reply": reply}

@app.post("/reset_memory")
def reset_memory(msg: Message):
    try:
        user = msg.user
        if user in chat_history:
            del chat_history[user]
            return {"status": f"–ü–∞–º—è—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} —Å–±—Ä–æ—à–µ–Ω–∞."}
        else:
            return {"status": f"–ü–∞–º—è—Ç—å –¥–ª—è {user} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."}
    except Exception as e:
        return {"status": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞–º—è—Ç–∏: {str(e)}"}
