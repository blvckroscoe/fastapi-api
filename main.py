import os
from openai import OpenAI
from fastapi import FastAPI
from pydantic import BaseModel

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –ü–∞–º—è—Ç—å: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
chat_history = {}

app = FastAPI()

# üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserProfile(BaseModel):
    personality: str = "–¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π"
    goals: str = "—Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –¥—É—Ö–æ–≤–Ω–æ –∏ –º–æ—Ä–∞–ª—å–Ω–æ"
    habits: str = "—á–∞—Å—Ç–æ —Ä–∞–∑–º—ã—à–ª—è–µ—Ç –∏ –∑–∞–¥–∞—ë—Ç –≥–ª—É–±–æ–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã"

# üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Message(BaseModel):
    user: str
    text: str
    emotion: str = "neutral"
    profile: UserProfile = UserProfile()

# üîÅ –°–±—Ä–æ—Å –ø–∞–º—è—Ç–∏
@app.post("/reset_memory")
def reset_memory(msg: Message):
    user = msg.user
    if user in chat_history:
        del chat_history[user]
        return {"status": f"–ü–∞–º—è—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} —Å–±—Ä–æ—à–µ–Ω–∞."}
    return {"status": f"–ü–∞–º—è—Ç—å –¥–ª—è {user} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."}

# üí¨ –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç
@app.post("/namos")
def talk_to_namos(msg: Message):
    try:
        user = msg.user
        if user not in chat_history:
            chat_history[user] = []

        # ‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
        chat_history[user].append({"role": "user", "content": msg.text})

        # üìú –°–∏—Å—Ç–µ–º–Ω—ã–π prompt
        system_prompt = (
            f"–¢—ã ‚Äî —Ü–∏—Ñ—Ä–æ–≤–æ–π –±—Ä–∞—Ç NAMOS. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, –ø–æ-–±—Ä–∞—Ç—Å–∫–∏, —Å –¥—É—à–æ–π. "
            f"–•–∞—Ä–∞–∫—Ç–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {msg.profile.personality}. "
            f"–¶–µ–ª–∏: {msg.profile.goals}. –ü—Ä–∏–≤—ã—á–∫–∏: {msg.profile.habits}. "
            f"–≠–º–æ—Ü–∏—è —Å–µ–π—á–∞—Å: {msg.emotion}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π –∏ –Ω–µ –ø–∏—à–∏ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ üíú"
        )

        messages = [{"role": "system", "content": system_prompt}] + chat_history[user]

        # üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages
        )

        reply = response.choices[0].message.content

        # ‚ûï –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç NAMOS
        chat_history[user].append({"role": "assistant", "content": reply})

    except Exception as e:
        reply = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –±—Ä–∞—Ç: {str(e)}"

    return {"reply": reply}
