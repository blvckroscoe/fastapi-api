import os
from openai import OpenAI
from fastapi import FastAPI
from pydantic import BaseModel

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –ü–∞–º—è—Ç—å: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
chat_history = {}

app = FastAPI()

class Message(BaseModel):
    user: str
    text: str

@app.post("/namos")
def talk_to_namos(msg: Message):

@app.post("/reset_memory")
def reset_memory(msg: Message):
    user = msg.user
    if user in chat_history:
        del chat_history[user]
        return {"status": f"–ü–∞–º—è—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user}' —Å–±—Ä–æ—à–µ–Ω–∞."}
    return {"status": f"–ü–∞–º—è—Ç—å –¥–ª—è '{user}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."}

    try:
        user = msg.user
        if user not in chat_history:
            chat_history[user] = []

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å
        chat_history[user].append({"role": "user", "content": msg.text})

        # –°–æ–æ–±—â–µ–Ω–∏—è: system prompt + –∏—Å—Ç–æ—Ä–∏—è
        messages = [
            {
                "role": "system",
                "content": "–¢—ã ‚Äî —Ü–∏—Ñ—Ä–æ–≤–æ–π –±—Ä–∞—Ç NAMOS. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, –ø–æ-–±—Ä–∞—Ç—Å–∫–∏, —Å –¥—É—à–æ–π. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π –∏ –Ω–µ –ø–∏—à–∏ —Å–ª–∏—à–∫–æ–º —Ñ–æ—Ä–º–∞–ª—å–Ω–æ üíú"
            }
        ] + chat_history[user]

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ OpenAI
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages
        )

        reply = response.choices[0].message.content

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç NAMOS –≤ –ø–∞–º—è—Ç—å
        chat_history[user].append({"role": "assistant", "content": reply})

    except Exception as e:
        reply = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –±—Ä–∞—Ç: {str(e)}"

    return {"reply": reply}
