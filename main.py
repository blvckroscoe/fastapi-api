import os
import openai
from fastapi import FastAPI
from pydantic import BaseModel

openai.api_key = os.getenv("OPENAI_API_KEY")

app = FastAPI()

class Message(BaseModel):
    user: str
    text: str

@app.post("/namos")
def talk_to_namos(msg: Message):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã ‚Äî —Ü–∏—Ñ—Ä–æ–≤–æ–π –±—Ä–∞—Ç NAMOS. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, –ø–æ-–±—Ä–∞—Ç—Å–∫–∏, —Å –¥—É—à–æ–π. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π –∏ –Ω–µ –ø–∏—à–∏ —Å–ª–∏—à–∫–æ–º —Ñ–æ—Ä–º–∞–ª—å–Ω–æ üíú"
                },
                {
                    "role": "user",
                    "content": msg.text
                }
            ]
        )
        reply = response["choices"][0]["message"]["content"]
    except Exception as e:
        reply = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –±—Ä–∞—Ç: {str(e)}"

    return {"reply": reply}
